@page "/"
@using GoogleMapsComponents
@using GoogleMapsComponents.Maps
@using ERPForServiceActivity.CommonModels.BindingModels.Maps
@inject IMapsService service

<MatButton @onclick=
		   "@(() => { showCustomerLogin = true; })">
	Customer login
</MatButton>
<MatButton @onclick=
		   "@(() => { showPersonalLogin = true; })">
	Services login
</MatButton>

<MatDialog @bind-IsOpen="@showCustomerLogin">
	<MatDialogTitle>
		Check repair status
	</MatDialogTitle>
	<MatDialogContent>
		<MatTextField Label="Customer name"
					  @bind-Value="@repair.ApplianceBrand"/>

		<MatTextField Label="Reclaim number"
					  @bind-Value="@repair.ApplianceEquipment"/>
	</MatDialogContent>
	<MatDialogActions>
		<MatButton @onclick=
				   "@(() => { showCustomerLogin = false; })">Check</MatButton>
		
		<MatButton @onclick=
				   "@(() => { showCustomerLogin = false; })">Cancel</MatButton>
	</MatDialogActions>
</MatDialog>

<MatDialog @bind-IsOpen="@showPersonalLogin">
	<MatDialogTitle>
		Services login
	</MatDialogTitle>
	<MatDialogContent>
		<MatTextField Label="Username"
					  @bind-Value="@repair.CustomerAddress"/>

		<MatTextField Label="Password"
					  Type="passowrd"
					  @bind-Value="@repair.CustomerName"/>

		<MatTextField Label="Verification code"
					  @bind-Value="@repair.DefectByCustomer"/>
	</MatDialogContent>
	<MatDialogActions>
		<MatButton @onclick=
				   "@(() => { showPersonalLogin = false; })">Login</MatButton>

		<MatButton @onclick=
				   "@(() => { showPersonalLogin = false; })">Cancel</MatButton>
	</MatDialogActions>
</MatDialog>

<GoogleMap @ref="map1" Id="map1" Options="mapOptions"></GoogleMap>

@code {
	GoogleMap map1;
	MapOptions mapOptions;

	bool showCustomerLogin = false;
	bool showPersonalLogin = false;
	AddRepairBindingModel repair =
		new AddRepairBindingModel();

	protected override async Task OnInitializedAsync() {
		MapsCoordinatesBindingModel mapsCoordinates =
			await Task.Run(() => {
				return service
					.GetCoordinates("СПИДИ София - Младост 3 (жк), бл. 319, ж.к. Младост 3, София")
					.Result;
			});

		mapOptions = new MapOptions() {
			Zoom = 13,

			Center = new LatLngLiteral() {
				Lat = mapsCoordinates.Lat,
				Lng = mapsCoordinates.Lng
			},
			MapTypeId = MapTypeId.Sattellite
		};
	}
}